@model AuthenticationTest.Models.tbl_users

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script src="~/Scripts/SigWebTablet.js"></script>
<script type="text/javascript">
    var tmr;

    function onSign()
    {
       var ctx = document.getElementById('cnv').getContext('2d');
       SetDisplayXSize( 300 );
       SetDisplayYSize( 100 );
       SetTabletState(0, tmr);
       SetJustifyMode(0);
       ClearTablet();
       if(tmr == null)
       {
          tmr = SetTabletState(1, ctx, 50);
       }
       else
       {
          SetTabletState(0, tmr);
          tmr = null;
          tmr = SetTabletState(1, ctx, 50);
       }
    }

    function onClear()
    {
       ClearTablet();
    }

    function onDone()
    {
        //alert();
       if(NumberOfTabletPoints() == 0)
       {
          alert("Please sign before continuing");
       }
       else
       {
           alert();
          SetTabletState(0, tmr);
          //RETURN TOPAZ-FORMAT SIGSTRING
          SetSigCompressionMode(1);
          //document.getElementById("bioSigData").value=GetSigString();
          //document.getElementById("sigStringData").value += GetSigString();
          //this returns the signature in Topaz's own format, with biometric information


          //RETURN BMP BYTE ARRAY CONVERTED TO BASE64 STRING
          SetImageXSize(300);
          SetImageYSize(100);
          SetImagePenWidth(5);
          GetSigImageB64(SigImageCallback);
       }
    }

    function SigImageCallback( str )
    {
        document.getElementById("signature").value = str;
    }
</script>


<script type="text/javascript">
    window.onunload = window.onbeforeunload = (function(){
    closingSigWeb()
    })

    function closingSigWeb()
    {
       ClearTablet();
       SetTabletState(0, tmr);
    }
</script>
<h2>Edit</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>tbl_users</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.U_Id)

        <div height="100" width="300" style="border:double;">
            <canvas id="cnv" name="cnv" width="300" height="100"></canvas>
        </div>
        @*<canvas name="SigImg" id="SigImg" width="300" height="100"></canvas>*@
        <input id="SignBtn" name="SignBtn" type="button" value="Sign" onclick="javascript:onSign()" />&nbsp;&nbsp;&nbsp;&nbsp;
        <input id="button1" name="ClearBtn" type="button" value="Clear" onclick="javascript:onClear()" />&nbsp;&nbsp;&nbsp;&nbsp

        <input id="button2" name="DoneBtn" type="button" value="Done" onclick="javascript:onDone()" />&nbsp;&nbsp;&nbsp;&nbsp

        @*<INPUT TYPE=HIDDEN NAME="bioSigData" id="bioSigData">
        <INPUT TYPE=HIDDEN NAME="sigImgData" id="sigImgData">
        <BR>
        <BR>
        <TEXTAREA NAME="sigStringData" id="sigStringData" ROWS="20" COLS="50">SigString: </TEXTAREA>
        <TEXTAREA NAME="sigImageData" id="sigImageData" ROWS="20" COLS="50">Base64 String: </TEXTAREA>*@


        <div class="form-group">
            @Html.LabelFor(model => model.username, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.username, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.username, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.signature, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.signature, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.signature, "", new { @class = "text-danger" })
            </div>
        </div>
        <div>
            <img src='@Model.signature' >
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
